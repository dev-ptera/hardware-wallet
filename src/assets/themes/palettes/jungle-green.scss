@use 'node_modules/@brightlayer-ui/colors/palette' as blui;
@use 'node_modules/@angular/material' as mat;
@use '../mixins/typography';
@use '../mixins/mdc-customization';
@use 'palette-classes';
@use 'sass:map';

/* For use in src/lib/core/theming/_palette.scss */
$greenPalette: (
    50 : #e5f1e6,
    100 : #bdddc0,
    200 : #92c696,
    300 : #66af6c,
    400 : #459e4d,
    500 : #248d2d,
    600 : #208528,
    700 : #1b7a22,
    800 : #16701c,
    900 : #0d5d11,
    A100 : #92ff95,
    A200 : #5fff64,
    A400 : #2cff32,
    A700 : #13ff19,
    contrast: (
        50 : #000000,
        100 : #000000,
        200 : #000000,
        300 : #000000,
        400 : #ffffff,
        500 : #ffffff,
        600 : #ffffff,
        700 : #ffffff,
        800 : #ffffff,
        900 : #ffffff,
        A100 : #000000,
        A200 : #000000,
        A400 : #000000,
        A700 : #000000,
    )
);

$my-primary: mat.define-palette($greenPalette, 700);
$my-accent: mat.define-palette($greenPalette, 900);
$my-warn: mat.define-palette(blui.$blui-red, 500);
$my-typography: mat.define-typography-config();

$jungle-green-theme: mat.define-light-theme((
    color: (
        primary: $my-primary,
        accent: $my-accent,
        warn: $my-warn,
    ),
    typography: typography.$custom-typography
));

.jungle-green {
    @include mat.typography-hierarchy($jungle-green-theme);
    @include typography.custom-typography-rules();
    @include palette-classes.utility-classes();
    @include mdc-customization.mdc-overrides();

    --primary:          #{map-get($my-primary, 700)};
    --primary-light-2:    #{rgba(map-get($my-primary, 700), .95)};
    --dashboard-accounts-container-bg: #{map-get(blui.$blui-white, 100)};
    --warn:             #{map-get($my-warn, 500)};
    --card:             #{map-get(blui.$blui-white, 100)};
    --text-contrast:    #{map-get(blui.$blui-white, 50)};
    --text:             #{map-get(blui.$blui-black, 500)};
    --text-secondary:   #{map-get(blui.$blui-black, 300)};
    --link:             #{map-get(blui.$blui-blue, 500)};
    --hint:             #{map-get(blui.$blui-black, 200)};
    --icon-primary:     #{map-get(blui.$blui-black, 500)};
    --icon-secondary:   #{map-get(blui.$blui-black, 300)};
    --divider:          rgba(66, 78, 84, 0.12);
    --divider-border:   rgba(66, 78, 84, 0.12);
    --input-focus-bg:   #{map-get(blui.$blui-gray, 50)};

    .sm {
        .dashboard-account-list, .account-history-scroll-container {
         //   background-color: rgba(map-get($my-primary, 500), .05);
          //  background-color: var(--primary);
            //   background-image: url("data:image/svg+xml,%3Csvg width='16' height='20' viewBox='0 0 16 20' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='%23ffffff' fill-opacity='0.4' fill-rule='evenodd'%3E%3Cpath d='M8 0v20L0 10M16 0v10L8 0M16 10v10H8'/%3E%3C/g%3E%3C/svg%3E");
         //   background-image: url("data:image/svg+xml,%3Csvg width='32' height='64' viewBox='0 0 32 64' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M0 28h20V16h-4v8H4V4h28v28h-4V8H8v12h4v-8h12v20H0v-4zm12 8h20v4H16v24H0v-4h12V36zm16 12h-4v12h8v4H20V44h12v12h-4v-8zM0 36h8v20H0v-4h4V40H0v-4z' fill='%23ffffff' fill-opacity='0.4' fill-rule='evenodd'/%3E%3C/svg%3E");
        }
    }
}
//map.get($jungle-green-theme, 'primary');
